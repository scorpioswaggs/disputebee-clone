const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const asyncHandler = require('express-async-handler');

// @desc    Generate PDF dispute letter
// @route   POST /api/pdf/generate-letter
// @access  Private
const generatePDFLetter = asyncHandler(async (req, res) => {
  const { 
    letterContent, 
    fileName = 'dispute-letter.pdf',
    includeLetterhead = true,
    includeFooter = true
  } = req.body;
  
  if (!letterContent) {
    res.status(400);
    throw new Error('Please provide letter content');
  }
  
  try {
    // Create directory for PDFs if it doesn't exist
    const pdfDir = path.join(__dirname, '../uploads/pdf');
    if (!fs.existsSync(pdfDir)) {
      fs.mkdirSync(pdfDir, { recursive: true });
    }
    
    // Create a unique filename
    const uniqueFileName = `${req.user._id}-${Date.now()}-${fileName}`;
    const filePath = path.join(pdfDir, uniqueFileName);
    
    // Create PDF document
    const doc = new PDFDocument({
      margins: { top: 72, bottom: 72, left: 72, right: 72 },
      size: 'letter'
    });
    
    // Pipe PDF to file
    doc.pipe(fs.createWriteStream(filePath));
    
    // Add letterhead if requested
    if (includeLetterhead) {
      doc.fontSize(18)
         .font('Helvetica-Bold')
         .text('CrediSure', { align: 'center' })
         .fontSize(12)
         .font('Helvetica')
         .text('Professional Credit Dispute Services', { align: 'center' })
         .moveDown(2);
    }
    
    // Add letter content
    const paragraphs = letterContent.split('\n\n');
    
    paragraphs.forEach((paragraph, index) => {
      // Handle line breaks within paragraphs
      const lines = paragraph.split('\n');
      
      lines.forEach((line, lineIndex) => {
        doc.text(line, {
          continued: lineIndex < lines.length - 1
        });
      });
      
      if (index < paragraphs.length - 1) {
        doc.moveDown();
      }
    });
    
    // Add footer if requested
    if (includeFooter) {
      const bottomPosition = doc.page.height - 50;
      
      doc.fontSize(8)
         .text('Generated by CrediSure - Take Control Now Credit Empowerment Platform', 
               doc.page.margins.left, 
               bottomPosition, 
               { align: 'center', width: doc.page.width - doc.page.margins.left - doc.page.margins.right });
    }
    
    // Finalize PDF
    doc.end();
    
    // Return file path
    res.json({
      success: true,
      filePath: filePath,
      fileName: uniqueFileName,
    });
  } catch (error) {
    console.error('PDF Generation Error:', error);
    res.status(500);
    throw new Error('Error generating PDF letter');
  }
});

// @desc    Generate PDF credit report analysis
// @route   POST /api/pdf/generate-analysis
// @access  Private
const generatePDFAnalysis = asyncHandler(async (req, res) => {
  const { 
    analysis, 
    fileName = 'credit-report-analysis.pdf',
    includeLetterhead = true,
    includeFooter = true
  } = req.body;
  
  if (!analysis) {
    res.status(400);
    throw new Error('Please provide analysis data');
  }
  
  try {
    // Create directory for PDFs if it doesn't exist
    const pdfDir = path.join(__dirname, '../uploads/pdf');
    if (!fs.existsSync(pdfDir)) {
      fs.mkdirSync(pdfDir, { recursive: true });
    }
    
    // Create a unique filename
    const uniqueFileName = `${req.user._id}-${Date.now()}-${fileName}`;
    const filePath = path.join(pdfDir, uniqueFileName);
    
    // Create PDF document
    const doc = new PDFDocument({
      margins: { top: 72, bottom: 72, left: 72, right: 72 },
      size: 'letter'
    });
    
    // Pipe PDF to file
    doc.pipe(fs.createWriteStream(filePath));
    
    // Add letterhead if requested
    if (includeLetterhead) {
      doc.fontSize(18)
         .font('Helvetica-Bold')
         .text('CrediSure', { align: 'center' })
         .fontSize(12)
         .font('Helvetica')
         .text('Credit Report Analysis', { align: 'center' })
         .moveDown(2);
    }
    
    // Add current date
    const currentDate = new Date().toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
    
    doc.text(`Date: ${currentDate}`, { align: 'right' })
       .moveDown(1);
    
    // Add credit score section
    doc.fontSize(14)
       .font('Helvetica-Bold')
       .text('Credit Score Summary')
       .moveDown(0.5);
    
    if (analysis.creditScore) {
      doc.fontSize(12)
         .font('Helvetica')
         .text(`Current Score: ${analysis.creditScore}`)
         .moveDown(0.5);
    } else if (analysis.creditScoreImpact) {
      doc.fontSize(12)
         .font('Helvetica')
         .text(`Current Score: ${analysis.creditScoreImpact.current}`)
         .text(`Potential Score: ${analysis.creditScoreImpact.potential}`)
         .text(`Potential Improvement: +${analysis.creditScoreImpact.improvement} points`)
         .moveDown(0.5);
    }
    
    // Add accounts section if available
    if (analysis.accounts && analysis.accounts.length > 0) {
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text('Accounts Summary')
         .moveDown(0.5);
      
      analysis.accounts.forEach(account => {
        doc.fontSize(12)
           .font('Helvetica-Bold')
           .text(`${account.accountName} (${account.accountType})`)
           .font('Helvetica')
           .text(`Account Number: ${account.accountNumber}`)
           .text(`Balance: $${account.balance}`)
           .text(`Status: ${account.paymentStatus}`)
           .text(`Opened: ${account.dateOpened}`)
           .moveDown(0.5);
      });
    }
    
    // Add potential issues section
    if (analysis.potentialIssues && analysis.potentialIssues.length > 0) {
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text('Potential Issues')
         .moveDown(0.5);
      
      analysis.potentialIssues.forEach(issue => {
        doc.fontSize(12)
           .font('Helvetica-Bold')
           .text(`${issue.issueType}`)
           .font('Helvetica')
           .text(`Account: ${issue.accountName}`)
           .text(`Description: ${issue.description}`)
           .text(`Recommended Action: ${issue.recommendedAction}`)
           .moveDown(0.5);
      });
    } else if (analysis.potentialDisputes && analysis.potentialDisputes.length > 0) {
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text('Potential Disputes')
         .moveDown(0.5);
      
      analysis.potentialDisputes.forEach(dispute => {
        doc.fontSize(12)
           .font('Helvetica-Bold')
           .text(`${dispute.issueType}`)
           .font('Helvetica')
           .text(`Account: ${dispute.accountName}`)
           .text(`Description: ${dispute.description}`)
           .text(`Dispute Reason: ${dispute.disputeReason}`)
           .text(`Likelihood of Success: ${dispute.likelihood}`)
           .text(`Potential Score Impact: ${dispute.scoreImpact}`)
           .moveDown(0.5);
      });
    }
    
    // Add recommended actions section
    if (analysis.recommendedActions && analysis.recommendedActions.length > 0) {
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text('Recommended Actions')
         .moveDown(0.5);
      
      analysis.recommendedActions.forEach((action, index) => {
        doc.fontSize(12)
           .font('Helvetica')
           .text(`${index + 1}. ${action}`)
           .moveDown(0.25);
      });
    }
    
    // Add footer if requested
    if (includeFooter) {
      const bottomPosition = doc.page.height - 50;
      
      doc.fontSize(8)
         .text('Generated by CrediSure - Take Control Now Credit Empowerment Platform', 
               doc.page.margins.left, 
               bottomPosition, 
               { align: 'center', width: doc.page.width - doc.page.margins.left - doc.page.margins.right });
    }
    
    // Finalize PDF
    doc.end();
    
    // Return file path
    res.json({
      success: true,
      filePath: filePath,
      fileName: uniqueFileName,
    });
  } catch (error) {
    console.error('PDF Generation Error:', error);
    res.status(500);
    throw new Error('Error generating PDF analysis');
  }
});

module.exports = {
  generatePDFLetter,
  generatePDFAnalysis,
};
